---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by LeeroyLin.
--- DateTime: 2021/9/6 7:54
---

local clsPtcBase = gClass.declare("clsPtcBase")

--- ==================== 构造方法 ====================

--- 构造方法
---@param ptc: 协议号(发送的协议号 接收的协议号自动+1)
---@param isCache: 是否缓存服务器返回数据(默认不缓存)
---@param handler: 基础回调(可空)
---@param errorHandler: 基础错误回调(可空)
function clsPtcBase:Ctor(ptc, isCache, handler, errorHandler)
    self.protocol = ptc                 -- 协议号或url
    self.isCache = isCache              -- 是否缓存服务器返回数据
    self.cache = nil                    -- 缓存服务器返回数据
    self.handlers = {}                  -- 回调方法字典 键为键名 值为{handler, errorHandler}
    self.handler = handler              -- 基础回调方法
    self.errorHandler = nil             -- 基础错误回调方法
    self.ptcType = ""                   -- 协议类型
end

--- ==================== 公共方法 ====================

--- 发送协议
---@param args: 参数
function clsPtcBase:Send(args)

end

--- 请求回调方法
---@param data: 服务器数据
function clsPtcBase:OnRec(data)
    -- 是否缓存
    if self.isCache then
        -- 缓存服务器返回数据
        self.cache = data
    end

    -- 分发
    if self.handler then
        self.handler(data)
    end
    for key, v in pairs(self.handlers) do
        if v.handler then
            v.handler(data)
        end
    end
end

--- 错误回调方法
function clsPtcBase:OnError(data)
    -- 标记是否分发
    local isDispatcher = false

    -- 分发
    if self.errorHandler then
        self.errorHandler(data)
        isDispatcher = true
    end
    for key, v in pairs(self.handlers) do
        if v.errorHandler then
            v.errorHandler(data)
            isDispatcher = true
        end
    end

    -- 是否没有分发错误
    if not isDispatcher then
        -- 报错
        gError(data)
    end
end

--- 注册回调
---@param key: 键名
---@param handler: 回调方法(不可空)
---@param errorHandler: 错误回调方法
function clsPtcBase:Reg(key, handler, errorHandler)
    -- 判空
    if handler == nil then
        gError(string.format("不可向协议'%s'注册空方法", self.protocol))
        return
    end

    -- 注册
    self.handlers[key] = {
        handler = handler,
        errorHandler = errorHandler,
    }
end

--- 注销回调
---@param key: 键名(不可空)
function clsPtcBase:UnReg(key)
    -- 判空
    if key == nil then
        gError(string.format("不可向协议'%s'注销空键名. 如需全部注销请调用'ClearReg()'方法.", self.protocol))
        return
    end

    -- 注销
    self.handlers[key] = nil
end

--- 清除所有注册回调
function clsPtcBase:ClearReg()
    self.handlers = {}
end

--- 清除缓存
function clsPtcBase:ClearCache()
    self.cache = nil
end

--- 获得缓存数据
function clsPtcBase:GetData()
    return self.cache
end

return clsPtcBase