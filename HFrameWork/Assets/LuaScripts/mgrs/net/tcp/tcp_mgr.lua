---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by LeeroyLin.
--- DateTime: 2021/9/8 15:13
---

local tcpMgr = {
    -- tcp枚举
    eTcp = {
        logic = "logic",    -- 逻辑服
    },

    -- socket字典 键为eTcp
    dic = {},
}

-- tcp映射
tcpMgr.mapping = {
    [tcpMgr.eTcp.logic] = {
        address = nil,
        port = nil,
        classPath = "mgrs/net/tcp/class_logic_tcp",
        isEncrypt = true,   -- 是否加密
    }
}

--- 设置地址
---@param eTcp: tcp枚举
---@param address: 地址
---@param port: 端口
function tcpMgr.set_address(eTcp, address, port)
    -- 获得数据
    local data = tcpMgr.mapping[eTcp]

    -- 没数据
    if not data then
        gError(string.format("[TCP] 尝试设置没有的配置. %s", eTcp))

        return
    end

    -- 设置
    data.address = address
    data.port = port
end

--- 连接
---@param eTcp: tcp枚举
---@param callback: 回调
---@param errorCallback: 错误回调
function tcpMgr.connect(eTcp, callback, errorCallback)
    -- 是否已经连接
    if tcpMgr.dic[eTcp] ~= nil then
        gError(string.format("[TCP] 尝试建立已经存在的tcp连接. %s", eTcp))

        return
    end

    -- 创建
    local data = tcpMgr.mapping[eTcp]
    local tcpIns = require(data.classPath):new(data.address, data.port, data.isEncrypt, true, callback, function (errorMsg)
        -- 移除数据
        tcpMgr.dic[eTcp] = nil

        -- 回调
        if errorCallback then
            errorCallback(errorMsg)
        end
    end)

    -- 记录
    tcpMgr.dic[eTcp] = tcpIns
end

--- 断开连接
---@param eTcp: tcp枚举
---@param protocol: 协议号
---@param msg: 内容
function tcpMgr.send(eTcp, protocol, msg)
    -- 获得数据
    local data = tcpMgr.dic[eTcp]

    -- 没有连接
    if not data then
        gError(string.format("[TCP] 尝试向没建立的连接[%s]发送数据.", eTcp))

        return
    end

    -- 发送数据
    data:Send(protocol, msg)
end

--- 断开连接
---@param eTcp: tcp枚举
---@param callback: 回调
---@param isRemoveData: 是否移除数据
function tcpMgr.disconnect(eTcp, callback, isRemoveData)
    -- 获得数据
    local data = tcpMgr.dic[eTcp]

    -- 没有连接
    if not data then
        gError(string.format("[TCP] 尝试向没建立的连接[%s]发送数据.", eTcp))

        return
    end

    -- 断开连接
    data:Disconnect(function ()
        -- 是否移除数据
        if isRemoveData then
            tcpMgr.remove_data(eTcp)
        end

        -- 回调
        if callback then
            callback()
        end
    end)
end

--- 移除数据 (只移除数据)
---@param eTcp: tcp枚举
function tcpMgr.remove_data(eTcp)
    tcpMgr.dic[eTcp] = nil
end

--- 清空所有
function tcpMgr.clear()
    -- 遍历所有的连接
    for i, v in pairs(tcpMgr.dic) do
        -- 断开连接
        v:Disconnect()
    end

    -- 清空字典
    tcpMgr.dic = {}
end

return tcpMgr