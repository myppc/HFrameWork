---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by LeeroyLin.
--- DateTime: 2021/9/10 14:41
---

local msgMgr = {
    -- 消息类型枚举
    eMsg = {
        net = "net",
        sceneLoading = "sceneLoading",
    },

    -- 字典形式存储注册信息
    dicData = {
        --[[
        [eMsg] = {
            ["groupName"] = {
                ["keyName"] = handler,
            }
        }
        ]]
    },
}

--- 注册消息
---@param eMsg: 消息类型枚举
---@param group: 组
---@param handler: 方法
---@param key: 区分方法重复注册的键 空则使用方法本身
function msgMgr.reg(eMsg, group, handler, key)
    -- 空数据
    if string.is_nil(eMsg) then
        gError("[msg_mgr] 注册消息,eMsg不能为空");
        return
    end
    if string.is_nil(group) then
        gError("[msg_mgr] 注册消息,group不能为空");
        return
    end
    if string.is_nil(handler) then
        gError("[msg_mgr] 注册消息,handler不能为空");
        return
    end
    
    -- 设置键
    if not key then
        key = tostring(handler)
    end
    
    -- 获得类型数据
    local msgData = msgMgr.dicData[eMsg]
    if not msgData then
        msgData = {}
        msgMgr.dicData[eMsg] = msgData
    end

    -- 获得组数据
    local groupData = msgData[group]
    if not groupData then
        groupData = {}
        msgData[group] = groupData
    end

    -- 是否已经有该键了
    if groupData[key] then
        gError(string.format("[msg_mgr] 尝试注册一个已存在的key'%s'的消息.", key))
        return
    end

    -- 添加
    groupData[key] = handler
end

--- 取消注册
---@param eMsg: 消息类型枚举
---@param group: 组
---@param keyOrHandler: 键或handler
function msgMgr.un_reg(eMsg, group, keyOrHandler)
    -- 空数据
    if string.is_nil(eMsg) then
        gError("[msg_mgr] 注销消息,eMsg不能为空");
        return
    end
    if string.is_nil(group) then
        gError("[msg_mgr] 注销消息,group不能为空");
        return
    end
    if string.is_nil(keyOrHandler) then
        gError("[msg_mgr] 注销消息,keyOrHandler不能为空");
        return
    end

    -- 获得类型数据
    local msgData = msgMgr.dicData[eMsg]
    if not msgData then
        return
    end

    -- 获得组数据
    local groupData = msgData[group]
    if not groupData then
        return
    end

    -- 移除数据
    groupData[keyOrHandler] = nil
end

--- 发送消息
---@param eMsg: 消息类型枚举
---@param group: 组
---@param args: 参数
function msgMgr.send(eMsg, group, args)
    -- 空数据
    if string.is_nil(eMsg) then
        gError("[msg_mgr] 发送消息,eMsg不能为空");
        return
    end
    if string.is_nil(group) then
        gError("[msg_mgr] 发送消息,group不能为空");
        return
    end

    -- 获得类型数据
    local msgData = msgMgr.dicData[eMsg]
    if not msgData then
        return
    end

    -- 获得组数据
    local groupData = msgData[group]
    if not groupData then
        return
    end

    -- 遍历所有的方法
    for key, handler in pairs(groupData) do
        if handler then
            -- 回调
            handler(args)
        end
    end
end

--- 通过类型枚举清除
---@param eMsg: 消息类型枚举
function msgMgr.clear_enum(eMsg)
    if not eMsg then
        return
    end

    -- 获得类型数据
    local msgData = msgMgr.dicData[eMsg]

    -- 清除数据
    msgData = {}
end

--- 通过类型枚举和组清除
---@param eMsg: 消息类型枚举
---@param group: 组
function msgMgr.clear_group(eMsg, group)
    if not eMsg or not group then
        return
    end

    -- 获得类型数据
    local msgData = msgMgr.dicData[eMsg]
    if not msgData then
        return
    end

    -- 清除数据
    msgData[group] = {}
end

--- 清除所有
function msgMgr.clear_all()
    msgMgr.dicData = {}
end

return msgMgr