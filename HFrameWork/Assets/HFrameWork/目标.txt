SceneMgr :
	1.异步加载缓存资源 
		依赖：
			PoolManager +
			ResMgr +
	2.卸载当前场景缓存资源 +
	3.卸载当前场景临时缓存资源 +
	4.卸载AB包资源 +

ResMgr:
	1.加载manifest +
		Editor 生成本地manifest +
		Package 加载manifest文件 +
		Net 加载manifest文件 -
	2.生成预制体 +
		通过pool生成gameobject +
		Editor模式下生成gameObject +
			同步 +
			异步 +
		Package模式下生成gameObject +
			同步 +
			异步 +

AssetsBundleMgr:
	1.通过AB包加载资源 +
		1.ABLoader +
			1.加载AB包 +
			2.加载依赖项 +
		2.卸载AB包 +
	2.加载本地资源 +
	3.加载Asset时确认依赖的AB包全部加载完成 +

AppConfig：
	1.持有manifest +
	2.获取平台字符串 + 

ABPacker : +
	1.序列化json +
	2.反序列化manifest.json +
	3.生成AB包 +
	4.生成lua代码AB +
	5.仅打包LUA代码 +

GoPoolManager：
	1.根据缓存设置类型不同进行GameObject缓存 +
	2.切换场景清理零时对象池和场景对象池 +
	3.切换场景时加载SCENE类型的缓存 +
	4.切换场景时保证最有释放方案 +

XLua 
	集成XLua +
	GameEntrance调用进入lua +
	集成XLua插件 + 
		备注：没有自己走CMake，后续还要再研究下，现在直接替换的Plugins文件夹

GameEntrance:
	

------------------------------------------------------------------------------------------------------
计时器：
	tick_mgr使用的是C#层的tick_manager帧计数器
		1.循环回调 +
		2.指定帧数回调 +
		3.下一帧回调 +
		4.异步的关闭计数 +


事件：
	1.监听事件 +
	2.分发事件 +
	3.通过tag进行注销事件 +
	4.通过事件和callback注销事件 + 

UI管理器:
	1.打开，关闭UI +
	2.base_ui +
	3.重开场景时 重载UI栈 +
	4.关闭场景时 释放UI栈 +
	5.管理ui在layer中可见设置 +
	6.完成block的设置 +
		



网络
	1.http

	2.socket


热更新

配置表
