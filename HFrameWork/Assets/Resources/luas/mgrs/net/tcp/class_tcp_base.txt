





local clsTcpBase = gClass.declare("clsPtcBase")










function clsTcpBase:Ctor(address, port, isEncrypt, isConnect, callback, errorCallback)

self.onConnected = nil
self.onConnectError = nil
self.onConnecting = nil
self.onDisconnected = nil
self.currSerial = nil


self.address = address
self.port = port


self.socket = gCSharp.NewTcp(address, port, isEncrypt)


self.socket:AddOnConnected(function()
self:OnConnected()
end)
self.socket:AddOnConnectError(function(msg)
self:OnConnectError(msg)
end)
self.socket:AddOnConnecting(function()
self:OnConnecting()
end)
self.socket:AddOnDisconnected(function()
self:OnDisconnected()
end)
self.socket:AddOnSendMsg(function(serial, ptc, str)
self:OnSendMsg(serial, ptc, str)
end)
self.socket:AddOnReceiveMsg(function(serial, ptc, str)
self:OnReceiveMsg(serial, ptc, str)
end)


if isConnect then
self:Connect(callback, errorCallback)
end
end




function clsTcpBase:Connect(onConnected, onConnectError, onConnecting)
self.onConnected = onConnected
self.onConnectError = onConnectError
self.onConnecting = onConnecting

if self.socket then

gMgrs.cover.show_cover(gMgrs.cover.eCover.tcp)


self.socket:Connect()
end
end


function clsTcpBase:Disconnect(onDisconnected)
self.onDisconnected = onDisconnected

if self.socket then
self.socket:Disconnect()
end

self.socket = nil
end


function clsTcpBase:Send(protocol, msg)
if msg == nil then
return
end

if not self.socket then
return
end

if not self.socket.IsConnected then
gError("[tcp][send][还没连接到tcp服务器]")
return
end


if type(msg) == "table" then
msg = gJson.encode(msg)
else
msg = tostring(msg)
end


local serial = self.socket:Send(protocol, msg)

if serial >= 0 then

self.currSerial = serial


gMgrs.cover.show_cover(gMgrs.cover.eCover.tcp)
end
end




function clsTcpBase:OnConnected()
gLogGroup("[TCP] 连接上: ", self.address, " 端口: ", self.port)


gMgrs.cover.hide_cover(gMgrs.cover.eCover.tcp)


if self.onConnected then
self.onConnected()
end
end


function clsTcpBase:OnConnectError(msg)
gLogGroup("[TCP] 连接错误: ", self.address, " 端口: ", self.port, " 信息: ", msg)


gMgrs.cover.hide_cover(gMgrs.cover.eCover.tcp)


if self.onConnectError then
self.onConnectError(msg)
end
end


function clsTcpBase:OnConnecting()

if self.onConnecting then
self.onConnecting()
end
end


function clsTcpBase:OnDisconnected()
gLogGroup("[TCP] 断开连接: ", self.address, " 端口: ", self.port)


if self.onDisconnected then
self.onDisconnected()
end
end


function clsTcpBase:OnSendMsg(serial, ptc, str)
gLog(string.format("[TCP] 发送数据：协议[%s],序列号[%s],内容[ %s ]", ptc, serial, str))
end


function clsTcpBase:OnReceiveMsg(serial, ptc, str)
gLog(string.format("[TCP] 接收到数据：协议[%s],序列号[%s],内容[ %s ]", ptc, serial, str))

if self.currSerial == serial then

gMgrs.cover.hide_cover(gMgrs.cover.eCover.tcp)
end


gMgrs.msg.send(gMgrs.msg.eMsg.net, ptc, str)
end

return clsTcpBase
