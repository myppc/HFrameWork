





local mainEntrance = {}


function mainEntrance.set_global()
gUnity = require("system/code_hints/code_hints_unityengine") 
gUnity = CS.UnityEngine

gCSharp = require("system/code_hints/code_hints_lua_bridge") 
gCSharp = CS.LuaCallCSharpHelper


gHelper = require('system/helper') 

local log = require('system/log') 
gLog = log.print
gLogGroup = log.print_group
gError = log.print_error

gJson = require("system/json") 

gClass = require("system/class_helper") 



gColor = require("system/color") 
gUtf8 = require("system/extension/utf8")
end


function mainEntrance.set_extension()
require("system/extension/table_ex")
require("system/extension/string_ex")
require("system/extension/math_ex")
end


function mainEntrance.lock_global()
setmetatable(_G, {
__index = function()
gLog(string.format("不可使用全局字段"))
end,
__newindex = function(t, k, v)
gLog(string.format("不可使用全局字段: %s", k))
end
})
end


function mainEntrance.start_game()

gMgrs.net.init()


gMgrs.unityUpdate.init()


gMgrs.timer.init()


gMgrs.update.init()


gMgrs.res.init()


local protocol = require("modules/protocol/protocol")
protocol.init()


gData.init()


gMgrs.ui.init()


gCfg.init()


mainEntrance.start_update()


















end


function mainEntrance.start_update()

gMgrs.ui.show_ui(gMgrs.ui.eUI.update)
end


function mainEntrance.run()

mainEntrance.set_global()


mainEntrance.set_extension()


mainEntrance.lock_global()

local pool_type = 
{
TEMP = 0,
STATIC = 1,
DYNAMIC = 2,
SCENE = 3,

}

CS.LuaCallCSharpHelper.RegisterCacheInfo("mode1","box.prefab",pool_type.SCENE,5,"Test1");
CS.LuaCallCSharpHelper.RegisterCacheInfo("mode1","box.prefab",pool_type.SCENE,10,"Test2");

CS.LuaCallCSharpHelper.LoadCacheByScene("Test2");






















end



function mainEntrance.on_destroy()

local tcpMgr = require("mgrs/net/tcp/tcp_mgr")
tcpMgr.clear()


gMgrs.msg.clear_all()
end


function mainEntrance.destroy()

mainEntrance.on_destroy()


gMgrs.ui.clear_all()


gMgrs.scene.unload_scene(function ()

gCSharp.ReloadEntrance()
end)
end

return mainEntrance
