









function table.tostring(tbl, level)
level = level or 0


local tblType = type(tbl)


if tblType == "string" then
local array = {
"\"",
tbl,
"\"",
}
return table.concat(array)
elseif tblType == "table" then  

else
return tostring(tbl)
end

local str_array = {}


local spacing = "    "
for i = 1, level do
table.insert(str_array, spacing)
end
local pre = table.concat(str_array)
table.insert(str_array, spacing)
local valuePre = table.concat(str_array)


str_array = {}


if level == 0 then
table.insert(str_array, "\n")
end


table.insert(str_array, "{")

local keyType


local count = 0
for i, v in pairs(tbl) do

count = count + 1


if count > 1 then
table.insert(str_array, ",")
end


keyType = type(i)


table.insert(str_array, "\n")
table.insert(str_array, valuePre)
table.insert(str_array, "[ ")


if keyType == "number" then
table.insert(str_array, tostring(i))

elseif keyType == "string" then 
table.insert(str_array, "\"")
table.insert(str_array, tostring(i))
table.insert(str_array, "\"")
else    
table.insert(str_array, tostring(i))
end

table.insert(str_array, " ] = ")


table.insert(str_array, table.tostring(v, level + 1))

end


table.insert(str_array, "\n")
table.insert(str_array, pre)
table.insert(str_array, "}")

return table.concat(str_array)
end



function table.num(tbl)
local count = 0
for i, v in pairs(tbl) do
count = count + 1
end

return count
end





function table.sort_by_value(tbl, value, isAsce)

if tbl == nil then
return
end

local newTable = {}
for k, v in pairs(tbl) do
table.insert(newTable, v)
end

table.sort(newTable, function(a, b)
if isAsce then
if a[value] < b[value] then
return true
end
else
if a[value] > b[value] then
return true
end
end
end)
return newTable
end





function table.find(tbl, val)
for i, v in pairs(tbl) do
if v == val then
return true
end
end

return false
end
